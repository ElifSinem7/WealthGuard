const express = require('express');
const cors = require('cors');
require('dotenv').config();
const http = require('http'); // http server oluÅŸturacaÄŸÄ±z
const socketIo = require('socket.io'); // Socket.io'yu ekliyoruz
const db = require('./src/config/db');

// Routes
const notificationRoutes = require('./src/routes/notificationRoutes');
const userRoutes = require('./src/routes/userRoutes');
const authRoutes = require('./src/routes/authRoutes');
const transactionRoutes = require('./src/routes/transactionRoutes');
const categoryRoutes = require('./src/routes/categoryRoutes');
const recurringRoutes = require('./src/routes/recurringRoutes');
const runRecurringTransactions = require('./src/cron/recurringTransactions');

const app = express();
const server = http.createServer(app); // Express uygulamasÄ±nÄ± HTTP server'Ä±na baÄŸlÄ±yoruz
const io = socketIo(server); // Socket.io'yu baÅŸlatÄ±yoruz

const PORT = process.env.PORT || 5000;

// âœ… CORS AyarlarÄ±
const corsOptions = {
    origin: process.env.CLIENT_URL || "http://localhost:3000",
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true
};

app.use(cors(corsOptions));
app.use(express.json());

// âœ… API Routes
app.use('/api/users', userRoutes);
app.use('/api/auth', authRoutes);
app.use('/api/transactions', transactionRoutes);
app.use('/api/categories', categoryRoutes);
app.use('/api/notifications', notificationRoutes);
app.use('/api/recurring', recurringRoutes);

// âœ… Socket.io baÄŸlantÄ±sÄ±
let activeSockets = {}; // KullanÄ±cÄ±larÄ±n aktif socket ID'lerini tutacak bir nesne

// Socket.io baÄŸlantÄ±sÄ± kurulduÄŸunda
io.on('connection', (socket) => {
    console.log('Yeni bir kullanÄ±cÄ± baÄŸlandÄ±:', socket.id);

    // KullanÄ±cÄ± baÄŸlandÄ±ÄŸÄ±nda, onun kullanÄ±cÄ± ID'sini sakla
    socket.on('userConnected', (userId) => {
        activeSockets[userId] = socket.id;
        console.log(`KullanÄ±cÄ± ${userId} aktif oldu.`);
    });

    // KullanÄ±cÄ± baÄŸlantÄ±sÄ± kesildiÄŸinde, socket ID'yi sil
    socket.on('disconnect', () => {
        for (let userId in activeSockets) {
            if (activeSockets[userId] === socket.id) {
                delete activeSockets[userId];
                console.log(`KullanÄ±cÄ± ${userId} Ã§Ä±kÄ±ÅŸ yaptÄ±.`);
                break;
            }
        }
    });
});

// âœ… Transaction ekleme route'u (Ã–rneÄŸin gelir-gider eklenince bildirim gÃ¶ndermek iÃ§in)
app.post('/api/transactions', async (req, res) => {
    const { user_id, category_id, amount, description, transaction_date } = req.body;

    if (!user_id || !category_id || !amount || !transaction_date) {
        return res.status(400).json({ message: "Eksik veri, tÃ¼m alanlarÄ± doldurduÄŸunuzdan emin olun." });
    }

    try {
        const query = `INSERT INTO transactions (user_id, category_id, amount, description, transaction_date) 
                       VALUES (?, ?, ?, ?, ?)`;

        const [result] = await db.query(query, [
            user_id, 
            category_id, 
            amount, 
            description || null, 
            transaction_date
        ]);

        // KullanÄ±cÄ±ya bildirim gÃ¶nder
        if (activeSockets[user_id]) {
            io.to(activeSockets[user_id]).emit('newTransaction', {
                message: 'Yeni bir gelir-gider eklendi!',
                transaction: { id: result.insertId, amount, description, transaction_date }
            });
        }

        res.status(201).json({
            message: 'Transaction baÅŸarÄ±yla eklendi!',
            transaction: { id: result.insertId, user_id, category_id, amount, description, transaction_date }
        });
    } catch (err) {
        console.error('VeritabanÄ± hatasÄ±:', err);
        res.status(500).json({ message: "Sunucu hatasÄ±, lÃ¼tfen tekrar deneyin." });
    }
});

// âœ… Cron test endpoint (isteÄŸe baÄŸlÄ±)
app.get('/api/test-recurring', async (req, res) => {
    try {
        await runRecurringTransactions();
        res.status(200).json({ message: "Recurring transactions executed successfully" });
    } catch (error) {
        console.error("Error running cron job manually:", error);
        res.status(500).json({ error: "Cron job execution failed" });
    }
});

// âœ… Ana route
app.get('/', (req, res) => {
    res.send('ðŸš€ API Ã‡alÄ±ÅŸÄ±yor!');
});

// âœ… Global error handler
app.use((err, req, res, next) => {
    console.error("Unhandled error:", err.stack);
    res.status(500).json({ error: 'Internal Server Error' });
});

// âœ… Server baÅŸlat
server.listen(PORT, () => {
    console.log(`ðŸš€ Server running on http://localhost:${PORT}`);
});
